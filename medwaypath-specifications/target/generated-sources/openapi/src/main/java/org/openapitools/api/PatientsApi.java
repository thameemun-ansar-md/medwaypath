/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.MedwaypathException;
import org.openapitools.model.Patient;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-03-17T17:49:25.134+05:30[Asia/Calcutta]")
@Validated
@Tag(name = "patients", description = "the patients API")
public interface PatientsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /patients : Create a new patient
     *
     * @param patient  (required)
     * @param mode  (optional)
     * @return The created patient (status code 201)
     */
    @Operation(
        operationId = "createPatient",
        summary = "Create a new patient",
        responses = {
            @ApiResponse(responseCode = "201", description = "The created patient", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Patient.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/patients",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Patient> createPatient(
        @Parameter(name = "Patient", description = "", required = true) @Valid @RequestBody Patient patient,
        @Parameter(name = "mode", description = "") @Valid @RequestParam(value = "mode", required = false) String mode
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"gender\" : \"Male\", \"dob\" : \"2000-01-23T04:56:07.000+00:00\", \"contact\" : \"contact\", \"name\" : \"name\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /patients : Get all patients
     *
     * @param page The page number to retrieve (optional, default to 1)
     * @param pageSize The number of patients per page (optional, default to 10)
     * @return A list of patients (status code 200)
     *         or Patient not found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "getAllPatients",
        summary = "Get all patients",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of patients", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Patient.class))
            }),
            @ApiResponse(responseCode = "404", description = "Patient not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MedwaypathException.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MedwaypathException.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/patients",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Patient>> getAllPatients(
        @Min(1) @Parameter(name = "page", description = "The page number to retrieve") @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
        @Min(1) @Max(100) @Parameter(name = "pageSize", description = "The number of patients per page") @Valid @RequestParam(value = "pageSize", required = false, defaultValue = "10") Integer pageSize
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"gender\" : \"Male\", \"dob\" : \"2000-01-23T04:56:07.000+00:00\", \"contact\" : \"contact\", \"name\" : \"name\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /patients/{patientId} : Get a patient by ID
     *
     * @param patientId The ID of the patient to retrieve (required)
     * @return The patient data (status code 200)
     *         or Patient not found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "getPatientById",
        summary = "Get a patient by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "The patient data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Patient.class))
            }),
            @ApiResponse(responseCode = "404", description = "Patient not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MedwaypathException.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MedwaypathException.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/patients/{patientId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Patient> getPatientById(
        @Parameter(name = "patientId", description = "The ID of the patient to retrieve", required = true) @PathVariable("patientId") String patientId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"gender\" : \"Male\", \"dob\" : \"2000-01-23T04:56:07.000+00:00\", \"contact\" : \"contact\", \"name\" : \"name\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
